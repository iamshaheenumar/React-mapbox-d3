{"version":3,"sources":["components/BeeSwarmOverlay/BeeSwarmOverlay.js","components/Map/Map.js","components/App/App.js","serviceWorker.js","index.js"],"names":["BeeSwarmOverlay","_ref","view","data","useEffect","x","d3","rangeRound","window","innerWidth","domain","beeswarm","locations","distributeOn","d","properties","performance","radius","orientation","side","arrange","react_default","a","createElement","esm","redraw","_ref2","width","height","isDragging","project","unproject","map","location","i","es","key","start","datum","geometry","coordinates","y","innerHeight","enter","timing","duration","ease","easeExpOut","update","state","r","fill","cx","cy","Map","children","setViewport","_useState","useState","latitude","longitude","zoom","minZoom","maxZoom","_useState2","Object","slicedToArray","viewport","objectSpread","dragPan","assign","mapboxApiAccessToken","process","onViewportChange","mapStyle","App","setView","className","onClick","components_Map_Map","components_BeeSwarmOverlay_BeeSwarmOverlay","Boolean","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.95032a78.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { SVGOverlay } from \"react-map-gl\";\r\nimport * as d3 from \"d3\";\r\nimport { beeswarm } from \"d3-beeswarm\";\r\nimport { Animate } from \"react-move\";\r\nimport { easeExpOut } from \"d3-ease\";\r\n\r\nimport locations from \"./data.json\";\r\n\r\nconst BeeSwarmOverlay = ({ view }) => {\r\n  let circles = null;\r\n  let data = [];\r\n  useEffect(() => {\r\n    // Prepare data for beeSwarm\r\n    let x = d3\r\n      .scaleLinear()\r\n      .rangeRound([0, window.innerWidth])\r\n      .domain([0, 100]);\r\n\r\n    data = beeswarm()\r\n      .data(locations)\r\n      .distributeOn(function(d) {\r\n        return x(d.properties.performance);\r\n      })\r\n      .radius(7)\r\n      .orientation(\"horizontal\")\r\n      .side(\"symetric\")\r\n      .arrange();\r\n  });\r\n\r\n  const _redraw = ({ width, height, isDragging, project, unproject }) => {\r\n    circles = data.map(\r\n      (location, i) =>\r\n        !isDragging && (\r\n          <Animate\r\n            key={i}\r\n            start={() => ({\r\n              x:\r\n                view === \"MAP\"\r\n                  ? project(location.datum.geometry.coordinates)[0]\r\n                  : location.x,\r\n              y:\r\n                view === \"MAP\"\r\n                  ? project(location.datum.geometry.coordinates)[1]\r\n                  : location.y + window.innerHeight / 2\r\n            })}\r\n            enter={() => ({\r\n              x: [\r\n                view === \"MAP\"\r\n                  ? location.x\r\n                  : project(location.datum.geometry.coordinates)[0]\r\n              ],\r\n              y: [\r\n                view === \"MAP\"\r\n                  ? location.y + window.innerHeight / 2\r\n                  : project(location.datum.geometry.coordinates)[1]\r\n              ],\r\n              timing: { duration: 1000, ease: easeExpOut }\r\n            })}\r\n            update={() => ({\r\n              x: [\r\n                view === \"MAP\"\r\n                  ? project(location.datum.geometry.coordinates)[0]\r\n                  : location.x\r\n              ],\r\n              y: [\r\n                view === \"MAP\"\r\n                  ? project(location.datum.geometry.coordinates)[1]\r\n                  : location.y + window.innerHeight / 2\r\n              ],\r\n              timing: { duration: 1000, ease: easeExpOut }\r\n            })}\r\n          >\r\n            {state => {\r\n              return <circle r={5} fill=\"#E26A71\" cx={state.x} cy={state.y} />;\r\n            }}\r\n          </Animate>\r\n        )\r\n    );\r\n\r\n    return circles;\r\n  };\r\n  return <SVGOverlay redraw={_redraw} />;\r\n};\r\n\r\nexport default BeeSwarmOverlay;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ReactMapGL from \"react-map-gl\";\r\n\r\nconst Map = ({ children, view }) => {\r\n  useEffect(() => {\r\n    setViewport();\r\n  }, [view]);\r\n\r\n  const mapStyle = \"mapbox://styles/shaheenumar/cjy8nf9ok11u91clhex1fbloy\";\r\n  const [viewport, setViewport] = useState({\r\n    width: \"100vw\",\r\n    height: \"100vh\",\r\n    latitude: 25.00957,\r\n    longitude: 55.125615,\r\n    zoom: 10.2,\r\n    minZoom: 10.2,\r\n    maxZoom: 15\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (view === \"MAP\") setViewport({ ...viewport, dragPan: false });\r\n    else setViewport({ ...viewport, dragPan: true });\r\n  }, [view]);\r\n\r\n  return (\r\n    <ReactMapGL\r\n      {...viewport}\r\n      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\r\n      onViewportChange={viewport => setViewport(viewport)}\r\n      mapStyle={mapStyle}\r\n    >\r\n      {children}\r\n    </ReactMapGL>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n","import React, { useState } from \"react\";\r\nimport BeeSwarmOverlay from \"../BeeSwarmOverlay\";\r\n\r\nimport Map from \"../Map\";\r\nimport \"./App.css\";\r\n\r\nconst App = () => {\r\n  const [view, setView] = useState(\"MAP\");\r\n\r\n  const _handleViewSwitch = () => {\r\n    if (view === \"MAP\") setView(\"VIZ\");\r\n    else setView(\"MAP\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"ViewSwitcher\" onClick={_handleViewSwitch}>\r\n        Switch View\r\n      </div>\r\n      <Map view={view}>\r\n        <BeeSwarmOverlay view={view} />\r\n      </Map>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}